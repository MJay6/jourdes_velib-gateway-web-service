//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MonitorGUI.MonitorServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MonitorServiceReference.IMonitorService")]
    public interface IMonitorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/GetNbRequest", ReplyAction="http://tempuri.org/IMonitorService/GetNbRequestResponse")]
        int GetNbRequest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/GetNbRequest", ReplyAction="http://tempuri.org/IMonitorService/GetNbRequestResponse")]
        System.Threading.Tasks.Task<int> GetNbRequestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/GetNbCacheRequest", ReplyAction="http://tempuri.org/IMonitorService/GetNbCacheRequestResponse")]
        int GetNbCacheRequest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/GetNbCacheRequest", ReplyAction="http://tempuri.org/IMonitorService/GetNbCacheRequestResponse")]
        System.Threading.Tasks.Task<int> GetNbCacheRequestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/GetCacheExpirationTime", ReplyAction="http://tempuri.org/IMonitorService/GetCacheExpirationTimeResponse")]
        int GetCacheExpirationTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/GetCacheExpirationTime", ReplyAction="http://tempuri.org/IMonitorService/GetCacheExpirationTimeResponse")]
        System.Threading.Tasks.Task<int> GetCacheExpirationTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/SetCacheExpirationTime", ReplyAction="http://tempuri.org/IMonitorService/SetCacheExpirationTimeResponse")]
        int SetCacheExpirationTime(int seconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/SetCacheExpirationTime", ReplyAction="http://tempuri.org/IMonitorService/SetCacheExpirationTimeResponse")]
        System.Threading.Tasks.Task<int> SetCacheExpirationTimeAsync(int seconds);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMonitorServiceChannel : MonitorGUI.MonitorServiceReference.IMonitorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MonitorServiceClient : System.ServiceModel.ClientBase<MonitorGUI.MonitorServiceReference.IMonitorService>, MonitorGUI.MonitorServiceReference.IMonitorService {
        
        public MonitorServiceClient() {
        }
        
        public MonitorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MonitorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MonitorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MonitorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetNbRequest() {
            return base.Channel.GetNbRequest();
        }
        
        public System.Threading.Tasks.Task<int> GetNbRequestAsync() {
            return base.Channel.GetNbRequestAsync();
        }
        
        public int GetNbCacheRequest() {
            return base.Channel.GetNbCacheRequest();
        }
        
        public System.Threading.Tasks.Task<int> GetNbCacheRequestAsync() {
            return base.Channel.GetNbCacheRequestAsync();
        }
        
        public int GetCacheExpirationTime() {
            return base.Channel.GetCacheExpirationTime();
        }
        
        public System.Threading.Tasks.Task<int> GetCacheExpirationTimeAsync() {
            return base.Channel.GetCacheExpirationTimeAsync();
        }
        
        public int SetCacheExpirationTime(int seconds) {
            return base.Channel.SetCacheExpirationTime(seconds);
        }
        
        public System.Threading.Tasks.Task<int> SetCacheExpirationTimeAsync(int seconds) {
            return base.Channel.SetCacheExpirationTimeAsync(seconds);
        }
    }
}
